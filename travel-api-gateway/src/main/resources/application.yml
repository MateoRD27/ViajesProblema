server:
  port: 8080

spring:
  application:
    name: travel-api-gateway

  data:
    redis:
      host: redis
      port: 6379
      timeout: 2000ms

  cloud:
    discovery:
      enabled: true

    gateway:
      default-filters:
        # Límite de peticiones por API key (rate limiter)
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 5    # peticiones por segundo
            redis-rate-limiter.burstCapacity: 10   # máximo acumulado
            key-resolver: "#{@apiKeyResolver}"     # resolver de clave (debes tener un bean apiKeyResolver)

      routes:
        - id: itinerary-service
          uri: lb://ITINERARY-SERVICE
          predicates:
            - Path=/api/public/itinerary/**
          filters:
            - RewritePath=/api/public/itinerary/(?<segment>.*), /api/itinerary/v1/${segment}
            - name: CircuitBreaker
              args:
                name: itineraryCB
                fallbackUri: forward:/fallback/itinerary

        - id: booking-service
          uri: lb://BOOKING-SERVICE
          predicates:
            - Path=/api/public/booking/**
          filters:
            - RewritePath=/api/public/booking/(?<segment>.*), /api/booking/v1/${segment}
            - name: CircuitBreaker
              args:
                name: bookingCB
                fallbackUri: forward:/fallback/booking

resilience4j:
  circuitbreaker:
    instances:
      itineraryCB:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
      bookingCB:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s

gateway:
  cache:
    ttl-seconds: 60
    paths: /api/public/itinerary/search

eureka:
  client:
    service-url:
      defaultZone: http://service-discovery:8761/eureka/
  instance:
    prefer-ip-address: true
